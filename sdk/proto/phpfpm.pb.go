// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phpfpm.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhpFpmHealth_PhpFpmHealthStatus int32

const (
	PhpFpmHealth_UNKNOWN  PhpFpmHealth_PhpFpmHealthStatus = 0
	PhpFpmHealth_ACTIVE   PhpFpmHealth_PhpFpmHealthStatus = 1
	PhpFpmHealth_DEGRADED PhpFpmHealth_PhpFpmHealthStatus = 2
)

var PhpFpmHealth_PhpFpmHealthStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "DEGRADED",
}

var PhpFpmHealth_PhpFpmHealthStatus_value = map[string]int32{
	"UNKNOWN":  0,
	"ACTIVE":   1,
	"DEGRADED": 2,
}

func (x PhpFpmHealth_PhpFpmHealthStatus) String() string {
	return proto.EnumName(PhpFpmHealth_PhpFpmHealthStatus_name, int32(x))
}

func (PhpFpmHealth_PhpFpmHealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ceb49dd7c0b7531, []int{2, 0}
}

// PhpFpmDetails registers a phpfpm master process + child pools
type PhpFpmDetails struct {
	Type                 string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Uuid                 string        `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	LocalId              string        `protobuf:"bytes,3,opt,name=local_id,json=localId,proto3" json:"local_id"`
	Name                 string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	Cmd                  string        `protobuf:"bytes,5,opt,name=cmd,proto3" json:"cmd"`
	ConfPath             string        `protobuf:"bytes,6,opt,name=conf_path,json=confPath,proto3" json:"conf_path"`
	BinPath              string        `protobuf:"bytes,7,opt,name=bin_path,json=binPath,proto3" json:"bin_path"`
	Version              string        `protobuf:"bytes,8,opt,name=version,proto3" json:"version"`
	VersionLine          string        `protobuf:"bytes,9,opt,name=version_line,json=versionLine,proto3" json:"version_line"`
	Pid                  int32         `protobuf:"varint,10,opt,name=pid,proto3" json:"pid"`
	Agent                string        `protobuf:"bytes,11,opt,name=agent,proto3" json:"agent"`
	Children             []*PhpFpmPool `protobuf:"bytes,12,rep,name=children,proto3" json:"children"`
	Workers              int32         `protobuf:"varint,13,opt,name=workers,proto3" json:"workers"`
	Health               *PhpFpmHealth `protobuf:"bytes,14,opt,name=health,proto3" json:"health"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PhpFpmDetails) Reset()         { *m = PhpFpmDetails{} }
func (m *PhpFpmDetails) String() string { return proto.CompactTextString(m) }
func (*PhpFpmDetails) ProtoMessage()    {}
func (*PhpFpmDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ceb49dd7c0b7531, []int{0}
}
func (m *PhpFpmDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhpFpmDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhpFpmDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhpFpmDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhpFpmDetails.Merge(m, src)
}
func (m *PhpFpmDetails) XXX_Size() int {
	return m.Size()
}
func (m *PhpFpmDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PhpFpmDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PhpFpmDetails proto.InternalMessageInfo

func (m *PhpFpmDetails) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PhpFpmDetails) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *PhpFpmDetails) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *PhpFpmDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhpFpmDetails) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *PhpFpmDetails) GetConfPath() string {
	if m != nil {
		return m.ConfPath
	}
	return ""
}

func (m *PhpFpmDetails) GetBinPath() string {
	if m != nil {
		return m.BinPath
	}
	return ""
}

func (m *PhpFpmDetails) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PhpFpmDetails) GetVersionLine() string {
	if m != nil {
		return m.VersionLine
	}
	return ""
}

func (m *PhpFpmDetails) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *PhpFpmDetails) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *PhpFpmDetails) GetChildren() []*PhpFpmPool {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *PhpFpmDetails) GetWorkers() int32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

func (m *PhpFpmDetails) GetHealth() *PhpFpmHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

// PhpFpmPool registers one of the worker pools of a Php-Fpm master process
type PhpFpmPool struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	LocalId              string   `protobuf:"bytes,3,opt,name=local_id,json=localId,proto3" json:"local_id"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	DisplayName          string   `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name"`
	ParentLocalId        string   `protobuf:"bytes,6,opt,name=parent_local_id,json=parentLocalId,proto3" json:"parent_local_id"`
	Listen               string   `protobuf:"bytes,7,opt,name=listen,proto3" json:"listen"`
	Flisten              string   `protobuf:"bytes,8,opt,name=flisten,proto3" json:"flisten"`
	StatusPath           string   `protobuf:"bytes,9,opt,name=status_path,json=statusPath,proto3" json:"status_path"`
	CanHaveChildren      bool     `protobuf:"varint,10,opt,name=can_have_children,json=canHaveChildren,proto3" json:"can_have_children"`
	Agent                string   `protobuf:"bytes,11,opt,name=agent,proto3" json:"agent"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhpFpmPool) Reset()         { *m = PhpFpmPool{} }
func (m *PhpFpmPool) String() string { return proto.CompactTextString(m) }
func (*PhpFpmPool) ProtoMessage()    {}
func (*PhpFpmPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ceb49dd7c0b7531, []int{1}
}
func (m *PhpFpmPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhpFpmPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhpFpmPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhpFpmPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhpFpmPool.Merge(m, src)
}
func (m *PhpFpmPool) XXX_Size() int {
	return m.Size()
}
func (m *PhpFpmPool) XXX_DiscardUnknown() {
	xxx_messageInfo_PhpFpmPool.DiscardUnknown(m)
}

var xxx_messageInfo_PhpFpmPool proto.InternalMessageInfo

func (m *PhpFpmPool) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PhpFpmPool) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *PhpFpmPool) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *PhpFpmPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhpFpmPool) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PhpFpmPool) GetParentLocalId() string {
	if m != nil {
		return m.ParentLocalId
	}
	return ""
}

func (m *PhpFpmPool) GetListen() string {
	if m != nil {
		return m.Listen
	}
	return ""
}

func (m *PhpFpmPool) GetFlisten() string {
	if m != nil {
		return m.Flisten
	}
	return ""
}

func (m *PhpFpmPool) GetStatusPath() string {
	if m != nil {
		return m.StatusPath
	}
	return ""
}

func (m *PhpFpmPool) GetCanHaveChildren() bool {
	if m != nil {
		return m.CanHaveChildren
	}
	return false
}

func (m *PhpFpmPool) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

// PhpFpmHealth reports the health details of PHPFPM process
type PhpFpmHealth struct {
	SystemId             string                          `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id"`
	PhpfpmHealthStatus   PhpFpmHealth_PhpFpmHealthStatus `protobuf:"varint,2,opt,name=phpfpm_health_status,json=phpfpmHealthStatus,proto3,enum=f5.nginx.agent.sdk.PhpFpmHealth_PhpFpmHealthStatus" json:"phpfpm_health_status"`
	DegradedReason       string                          `protobuf:"bytes,3,opt,name=degraded_reason,json=degradedReason,proto3" json:"degraded_reason"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PhpFpmHealth) Reset()         { *m = PhpFpmHealth{} }
func (m *PhpFpmHealth) String() string { return proto.CompactTextString(m) }
func (*PhpFpmHealth) ProtoMessage()    {}
func (*PhpFpmHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ceb49dd7c0b7531, []int{2}
}
func (m *PhpFpmHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhpFpmHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhpFpmHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhpFpmHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhpFpmHealth.Merge(m, src)
}
func (m *PhpFpmHealth) XXX_Size() int {
	return m.Size()
}
func (m *PhpFpmHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_PhpFpmHealth.DiscardUnknown(m)
}

var xxx_messageInfo_PhpFpmHealth proto.InternalMessageInfo

func (m *PhpFpmHealth) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *PhpFpmHealth) GetPhpfpmHealthStatus() PhpFpmHealth_PhpFpmHealthStatus {
	if m != nil {
		return m.PhpfpmHealthStatus
	}
	return PhpFpmHealth_UNKNOWN
}

func (m *PhpFpmHealth) GetDegradedReason() string {
	if m != nil {
		return m.DegradedReason
	}
	return ""
}

func init() {
	proto.RegisterEnum("f5.nginx.agent.sdk.PhpFpmHealth_PhpFpmHealthStatus", PhpFpmHealth_PhpFpmHealthStatus_name, PhpFpmHealth_PhpFpmHealthStatus_value)
	proto.RegisterType((*PhpFpmDetails)(nil), "f5.nginx.agent.sdk.PhpFpmDetails")
	proto.RegisterType((*PhpFpmPool)(nil), "f5.nginx.agent.sdk.PhpFpmPool")
	proto.RegisterType((*PhpFpmHealth)(nil), "f5.nginx.agent.sdk.PhpFpmHealth")
}

func init() { proto.RegisterFile("phpfpm.proto", fileDescriptor_7ceb49dd7c0b7531) }

var fileDescriptor_7ceb49dd7c0b7531 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4f, 0x6f, 0xda, 0x4a,
	0x10, 0x7f, 0x0e, 0x01, 0xcc, 0x18, 0x02, 0x6f, 0xdf, 0x7b, 0x92, 0xdf, 0xd3, 0x13, 0x46, 0x48,
	0x55, 0x69, 0x0f, 0x50, 0x81, 0xaa, 0x1e, 0xd2, 0x4b, 0x08, 0x69, 0x13, 0x35, 0xa2, 0xd1, 0xf6,
	0x9f, 0xd4, 0x8b, 0xb5, 0xe0, 0x05, 0xaf, 0x62, 0xd6, 0x96, 0x6d, 0x68, 0x73, 0xea, 0xb7, 0xea,
	0x67, 0xe8, 0xb1, 0xfd, 0x02, 0x56, 0xc5, 0xd1, 0x9f, 0xa2, 0xda, 0x5d, 0x1b, 0x48, 0xd2, 0x2a,
	0xd7, 0x5e, 0x66, 0x67, 0x7e, 0xf3, 0xdb, 0xf1, 0x8c, 0xe7, 0x67, 0x43, 0x35, 0x70, 0x83, 0x59,
	0xb0, 0xe8, 0x06, 0xa1, 0x1f, 0xfb, 0x08, 0xcd, 0x1e, 0x77, 0xf9, 0x9c, 0xf1, 0x8f, 0x5d, 0x32,
	0xa7, 0x3c, 0xee, 0x46, 0xce, 0xe5, 0x7f, 0x30, 0xf7, 0xe7, 0xbe, 0xca, 0xb7, 0xbf, 0xed, 0x43,
	0xed, 0xc2, 0x0d, 0x9e, 0x05, 0x8b, 0x11, 0x8d, 0x09, 0xf3, 0x22, 0xf4, 0x3f, 0xec, 0xc7, 0x57,
	0x01, 0x35, 0xb5, 0x96, 0xd6, 0xa9, 0x0c, 0xf5, 0x34, 0xb1, 0x64, 0x8c, 0xa5, 0x15, 0xd9, 0xe5,
	0x92, 0x39, 0xe6, 0xde, 0x36, 0x2b, 0x62, 0x2c, 0x2d, 0xba, 0x0f, 0xba, 0xe7, 0x4f, 0x89, 0x67,
	0x33, 0xc7, 0x2c, 0x48, 0x46, 0x35, 0x4d, 0xac, 0x0d, 0x86, 0xcb, 0xd2, 0x3b, 0x73, 0x44, 0x19,
	0x4e, 0x16, 0xd4, 0xdc, 0xdf, 0x96, 0x11, 0x31, 0x96, 0x16, 0xfd, 0x0b, 0x85, 0xe9, 0xc2, 0x31,
	0x8b, 0x32, 0x59, 0x4e, 0x13, 0x4b, 0x84, 0x58, 0x18, 0xf4, 0x10, 0x2a, 0x53, 0x9f, 0xcf, 0xec,
	0x80, 0xc4, 0xae, 0x59, 0x92, 0x84, 0x5a, 0x9a, 0x58, 0x5b, 0x10, 0xeb, 0xc2, 0xbd, 0x20, 0xb1,
	0x2b, 0xba, 0x99, 0x30, 0xae, 0xa8, 0xe5, 0x6d, 0x37, 0x39, 0x86, 0xcb, 0x13, 0xc6, 0x25, 0xf1,
	0x1e, 0x94, 0x57, 0x34, 0x8c, 0x98, 0xcf, 0x4d, 0x5d, 0xf2, 0x8c, 0x34, 0xb1, 0x72, 0x08, 0xe7,
	0x0e, 0x1a, 0x40, 0x35, 0x73, 0x6d, 0x8f, 0x71, 0x6a, 0x56, 0x24, 0xb7, 0x91, 0x26, 0xd6, 0x35,
	0x1c, 0x1b, 0x59, 0x74, 0xce, 0xb8, 0x9c, 0x25, 0x60, 0x8e, 0x09, 0x2d, 0xad, 0x53, 0x54, 0xb3,
	0x04, 0xcc, 0xc1, 0xc2, 0x20, 0x0b, 0x8a, 0x72, 0x29, 0xa6, 0x21, 0x0b, 0x55, 0xd2, 0xc4, 0x52,
	0x00, 0x56, 0x07, 0x3a, 0x05, 0x7d, 0xea, 0x32, 0xcf, 0x09, 0x29, 0x37, 0xab, 0xad, 0x42, 0xc7,
	0xe8, 0x37, 0xbb, 0xb7, 0xf7, 0xd9, 0x55, 0xfb, 0xbb, 0xf0, 0x7d, 0x4f, 0x0d, 0x98, 0xdf, 0xc1,
	0x1b, 0x4f, 0x4c, 0xf8, 0xc1, 0x0f, 0x2f, 0x69, 0x18, 0x99, 0x35, 0xd9, 0x89, 0x9c, 0x30, 0x83,
	0x70, 0xee, 0xa0, 0x11, 0x94, 0x5c, 0x4a, 0xbc, 0xd8, 0x35, 0x0f, 0x5a, 0x5a, 0xc7, 0xe8, 0xb7,
	0x7e, 0xfd, 0xb8, 0x53, 0xc9, 0x1b, 0x42, 0x9a, 0x58, 0xd9, 0x1d, 0x9c, 0x9d, 0xed, 0x75, 0x01,
	0x60, 0xdb, 0xd3, 0xef, 0x20, 0xa8, 0x01, 0x54, 0x1d, 0x16, 0x05, 0x1e, 0xb9, 0xb2, 0x25, 0xab,
	0xb8, 0xdd, 0xdc, 0x2e, 0x8e, 0x8d, 0x2c, 0x1a, 0x8b, 0x4b, 0x87, 0x50, 0x0f, 0x48, 0x48, 0x79,
	0x6c, 0x6f, 0x5a, 0x50, 0x82, 0xfb, 0x2b, 0x4d, 0xac, 0x9b, 0x29, 0x5c, 0x53, 0xc0, 0x79, 0xd6,
	0x4f, 0x1b, 0x4a, 0x1e, 0x8b, 0x62, 0xca, 0x33, 0xe5, 0xc9, 0xf7, 0xa4, 0x10, 0x9c, 0x9d, 0x62,
	0x29, 0xb3, 0x8c, 0xb4, 0x23, 0xbb, 0x0c, 0xc2, 0xb9, 0x83, 0x1e, 0x81, 0x11, 0xc5, 0x24, 0x5e,
	0x46, 0x4a, 0xc9, 0x4a, 0x75, 0xf5, 0x34, 0xb1, 0x76, 0x61, 0x0c, 0x2a, 0x90, 0x7a, 0x3e, 0x82,
	0x3f, 0xa7, 0x84, 0xdb, 0x2e, 0x59, 0x51, 0x7b, 0x23, 0x20, 0xa1, 0x40, 0x7d, 0xf8, 0x4f, 0x9a,
	0x58, 0xb7, 0x93, 0xb8, 0x3e, 0x25, 0xfc, 0x94, 0xac, 0xe8, 0x71, 0x2e, 0x98, 0xbb, 0xb4, 0xd9,
	0xfe, 0xbc, 0x07, 0xd5, 0x5d, 0x25, 0x88, 0x2f, 0x33, 0xba, 0x8a, 0x62, 0xba, 0x10, 0x2f, 0x4a,
	0xdb, 0x7e, 0x99, 0x1b, 0x10, 0xeb, 0xca, 0x3d, 0x73, 0xd0, 0x27, 0xf8, 0x5b, 0xfd, 0xa5, 0x6c,
	0x25, 0x19, 0x5b, 0x35, 0x2f, 0x45, 0x70, 0xd0, 0x1f, 0xdc, 0xa5, 0xba, 0x6b, 0xc1, 0x2b, 0x79,
	0x75, 0x68, 0xa6, 0x89, 0xf5, 0xd3, 0xa2, 0x18, 0x29, 0x74, 0x97, 0x8d, 0x9e, 0x42, 0xdd, 0xa1,
	0xf3, 0x90, 0x38, 0xd4, 0xb1, 0x43, 0x4a, 0x22, 0x9f, 0x67, 0xf2, 0x92, 0xbb, 0xbd, 0x91, 0xc2,
	0x07, 0x39, 0x80, 0x65, 0xdc, 0x3e, 0x04, 0x74, 0xbb, 0x03, 0x64, 0x40, 0xf9, 0xcd, 0xf8, 0xc5,
	0xf8, 0xe5, 0xbb, 0x71, 0xe3, 0x0f, 0x04, 0x50, 0x3a, 0x3a, 0x7e, 0x7d, 0xf6, 0xf6, 0xa4, 0xa1,
	0xa1, 0x2a, 0xe8, 0xa3, 0x93, 0xe7, 0xf8, 0x68, 0x74, 0x32, 0x6a, 0xec, 0x0d, 0x9f, 0x7c, 0x59,
	0x37, 0xb5, 0xaf, 0xeb, 0xa6, 0xf6, 0x7d, 0xdd, 0xd4, 0xde, 0x3f, 0x98, 0xb3, 0xd8, 0x5d, 0x4e,
	0xba, 0x53, 0x7f, 0xd1, 0x93, 0x23, 0xf7, 0xe4, 0xc8, 0xbd, 0xc8, 0xb9, 0xec, 0xad, 0xfa, 0x3d,
	0xf9, 0x93, 0x3e, 0x94, 0x76, 0x52, 0x92, 0xc7, 0xe0, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55,
	0x91, 0x92, 0xb6, 0xe1, 0x05, 0x00, 0x00,
}

func (m *PhpFpmDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhpFpmDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhpFpmDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Health != nil {
		{
			size, err := m.Health.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPhpfpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Workers != 0 {
		i = encodeVarintPhpfpm(dAtA, i, uint64(m.Workers))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhpfpm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Agent) > 0 {
		i -= len(m.Agent)
		copy(dAtA[i:], m.Agent)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Agent)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Pid != 0 {
		i = encodeVarintPhpfpm(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x50
	}
	if len(m.VersionLine) > 0 {
		i -= len(m.VersionLine)
		copy(dAtA[i:], m.VersionLine)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.VersionLine)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BinPath) > 0 {
		i -= len(m.BinPath)
		copy(dAtA[i:], m.BinPath)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.BinPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ConfPath) > 0 {
		i -= len(m.ConfPath)
		copy(dAtA[i:], m.ConfPath)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.ConfPath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cmd) > 0 {
		i -= len(m.Cmd)
		copy(dAtA[i:], m.Cmd)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Cmd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LocalId) > 0 {
		i -= len(m.LocalId)
		copy(dAtA[i:], m.LocalId)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.LocalId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhpFpmPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhpFpmPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhpFpmPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Agent) > 0 {
		i -= len(m.Agent)
		copy(dAtA[i:], m.Agent)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Agent)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CanHaveChildren {
		i--
		if m.CanHaveChildren {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.StatusPath) > 0 {
		i -= len(m.StatusPath)
		copy(dAtA[i:], m.StatusPath)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.StatusPath)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Flisten) > 0 {
		i -= len(m.Flisten)
		copy(dAtA[i:], m.Flisten)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Flisten)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Listen) > 0 {
		i -= len(m.Listen)
		copy(dAtA[i:], m.Listen)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Listen)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ParentLocalId) > 0 {
		i -= len(m.ParentLocalId)
		copy(dAtA[i:], m.ParentLocalId)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.ParentLocalId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LocalId) > 0 {
		i -= len(m.LocalId)
		copy(dAtA[i:], m.LocalId)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.LocalId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhpFpmHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhpFpmHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhpFpmHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DegradedReason) > 0 {
		i -= len(m.DegradedReason)
		copy(dAtA[i:], m.DegradedReason)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.DegradedReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PhpfpmHealthStatus != 0 {
		i = encodeVarintPhpfpm(dAtA, i, uint64(m.PhpfpmHealthStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SystemId) > 0 {
		i -= len(m.SystemId)
		copy(dAtA[i:], m.SystemId)
		i = encodeVarintPhpfpm(dAtA, i, uint64(len(m.SystemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhpfpm(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhpfpm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhpFpmDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.LocalId)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.ConfPath)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.BinPath)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.VersionLine)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovPhpfpm(uint64(m.Pid))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovPhpfpm(uint64(l))
		}
	}
	if m.Workers != 0 {
		n += 1 + sovPhpfpm(uint64(m.Workers))
	}
	if m.Health != nil {
		l = m.Health.Size()
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhpFpmPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.LocalId)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.ParentLocalId)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Listen)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.Flisten)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	l = len(m.StatusPath)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.CanHaveChildren {
		n += 2
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhpFpmHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SystemId)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.PhpfpmHealthStatus != 0 {
		n += 1 + sovPhpfpm(uint64(m.PhpfpmHealthStatus))
	}
	l = len(m.DegradedReason)
	if l > 0 {
		n += 1 + l + sovPhpfpm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPhpfpm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhpfpm(x uint64) (n int) {
	return sovPhpfpm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhpFpmDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhpfpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhpFpmDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhpFpmDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionLine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &PhpFpmPool{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			m.Workers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Workers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Health == nil {
				m.Health = &PhpFpmHealth{}
			}
			if err := m.Health.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhpfpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhpFpmPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhpfpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhpFpmPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhpFpmPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentLocalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentLocalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flisten", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flisten = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanHaveChildren", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanHaveChildren = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhpfpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhpFpmHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhpfpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhpFpmHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhpFpmHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhpfpmHealthStatus", wireType)
			}
			m.PhpfpmHealthStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhpfpmHealthStatus |= PhpFpmHealth_PhpFpmHealthStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegradedReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhpfpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegradedReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhpfpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhpfpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhpfpm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhpfpm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhpfpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhpfpm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhpfpm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhpfpm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhpfpm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhpfpm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhpfpm = fmt.Errorf("proto: unexpected end of group")
)
